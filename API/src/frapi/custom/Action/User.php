<?php

/**
 * Action User 
 * 
 * A class generated by Frapi
 * 
 * @link http://getfrapi.com
 * @author Frapi <frapi@getfrapi.com>
 * @link /user
 */
class Action_User extends Frapi_Action implements Frapi_Action_Interface
{

    /**
     * Required parameters
     * 
     * @var An array of required parameters.
     */
    protected $requiredParams = array();

    /**
     * The data container to use in toArray()
     * 
     * @var A container of data to fill and return in toArray()
     */
    private $data = array();

    /**
     * To Array
     * 
     * This method returns the value found in the database 
     * into an associative array.
     * 
     * @return array
     */
    public function toArray()
    {
        return $this->data;
    }

    /**
     * Default Call Method
     * 
     * This method is called when no specific request handler has been found
     * 
     * @return array
     */
    public function executeAction()
    {
        return $this->toArray();
    }

    /**
     * Get Request Handler
     * 
     * This method is called when a request is a GET
     * 
     * @return array
     */
    public function executeGet()
    {

        $db = Frapi_Database::getInstance();
        $sqlStmt = 'SELECT * FROM users';
        $stm = $db->prepare($sqlStmt);
        $stm->execute();
        $this->data['content'] = array(
            'users' => $stm->fetchAll(PDO::FETCH_ASSOC)
        );

        return $this->toArray();
    }

    /**
     * Post Request Handler
     * 
     * This method is called when a request is a POST
     * 
     * @return array
     */
    public function executePost()
    {

        #print_r($this);
        $username = $this->getParam('username', self::TYPE_STRING);
        $password = $this->getParam('password', self::TYPE_STRING);
        $first_name = $this->getParam('first_name', self::TYPE_STRING);
        $last_name = $this->getParam('last_name', self::TYPE_STRING);

        $db = Frapi_Database::getInstance();
        $sqlStmt = "INSERT users SET username='" . $username . "'"
            . ", password='" . $password . "'"
            . ", first_name='" . $first_name . "'"
            . ", last_name='" . $last_name . "'";
        $stm = $db->prepare($sqlStmt);
        echo $sqlStmt;
        $stm->execute();
        $this->data['content'] = array(
            'count' => $stm->rowCount()
        );

        return $this->toArray();
    }

    /**
     * Put Request Handler
     * 
     * This method is called when a request is a PUT
     * 
     * @return array
     */
    public function executePut()
    {
        return $this->toArray();
    }

    /**
     * Delete Request Handler
     * 
     * This method is called when a request is a DELETE
     * 
     * @return array
     */
    public function executeDelete()
    {
        return $this->toArray();
    }

    /**
     * Head Request Handler
     * 
     * This method is called when a request is a HEAD
     * 
     * @return array
     */
    public function executeHead()
    {
        return $this->toArray();
    }


}

