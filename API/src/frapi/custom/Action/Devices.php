<?php

/**
 * Action Devices 
 * 
 * A class generated by Frapi
 * 
 * @link http://getfrapi.com
 * @author Frapi <frapi@getfrapi.com>
 * @link /devices
 */
require_once(CUSTOM_LIBRARY . DIRECTORY_SEPARATOR . 'common/libraries.php');

#class Action_Devices extends Frapi_Action implements Frapi_Action_Interface
class Action_Devices extends Extend_Interface implements Frapi_Action_Interface
{

    /**
     * Required parameters
     * 
     * @var An array of required parameters.
     */
    protected $requiredParams = array();

    /**
     * The data container to use in toArray()
     * 
     * @var A container of data to fill and return in toArray()
     */
    protected $data = array();

    protected $table = "Devices";

    protected $name = 'devices';

    protected $PDefault = Array("id"=>"",
                             "name"=>"",
                             "location"=>"",
                             "serial_number"=>"",
                             "comment"=>"",
                             "deleted"=>0,
                             "date_created"=>"",
                             );

    /**
     * To Array
     * 
     * This method returns the value found in the database 
     * into an associative array.
     * 
     * @return array
     */
    public function toArray()
    {
        return $this->data;
    }

    /**
     * Default Call Method
     * 
     * This method is called when no specific request handler has been found
     * 
     * @return array
     */
    public function executeAction()
    {
        return $this->toArray();
    }

    /**
     * Get Request Handler
     * 
     * This method is called when a request is a GET
     * 
     * @return array
     */
    public function executeGet()
    {
        #$status = Custom_Model_Auth::authorize($this->getParams());

        $Params = $this->getParams();
        //print_r($Params);
        if ( array_key_exists("filter", $Params) ) {
            $WhereClause = $Params["filter"];
        } else {
            $WhereClause = "";
        }
        list($this->data['content'][$this->name], $this->data['sql']) = $this->CommonSelect($WhereClause);
        /*switch (gettype($status)) {
            case "boolean":
                $this->data['content'][$this->name] = $this->CommonSelect();
                break;
            case "string":
                return new Frapi_Response(array(
                    'code' => 200,
                    'data' => array(
                        'access_token' => $status,
                        'expires_in' => '3600'
                    )
                ));
                break;
            case "object":
                return new Frapi_Response(array(
                    'code' => 401,
                    'data' => array(
                        'error' => 'invalid_grant',
                        'error_description' => 'The access token is expired.'
                    )
                ));

                #return $status;
                break;
        }*/

        #print_r($status);
        return $this->toArray();
    }

    /**
     * Post Request Handler
     * 
     * This method is called when a request is a POST
     * 
     * @return array
     */
    public function executePost()
    {
        $POverride = Array();
        $POverride["date_created"] = gmdate("Y-m-d H:i:s");
        $this->data['content'] = $this->CommonChange(null, $POverride, $this->PDefault);

        return new Frapi_Response(array(
            'code' => '201',
            'headers' => array(
                'Location' => '/collection/' . $this->name,
            ),
            'data' => array('content' => $this->data['content']),
        ));

    }

    /**
     * Put Request Handler
     * 
     * This method is called when a request is a PUT
     * 
     * @return array
     */
    public function executePut()
    {
        return $this->toArray();
    }

    /**
     * Delete Request Handler
     * 
     * This method is called when a request is a DELETE
     * 
     * @return array
     */
    public function executeDelete()
    {
        return $this->toArray();
    }

    /**
     * Head Request Handler
     * 
     * This method is called when a request is a HEAD
     * 
     * @return array
     */
    public function executeHead()
    {
        return $this->toArray();
    }


}

